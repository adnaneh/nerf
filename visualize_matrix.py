import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

# The confusion array from the C code
confusion = [
    0xac,0xd1,0x25,0x94,0x1f,0xb3,0x33,0x28,0x7c,0x2b,0x17,0xbc,0xf6,0xb0,0x55,0x5d,
    0x8f,0xd2,0x48,0xd4,0xd3,0x78,0x62,0x1a,0x02,0xf2,0x01,0xc9,0xaa,0xf0,0x83,0x71,
    0x72,0x4b,0x6a,0xe8,0xe9,0x42,0xc0,0x53,0x63,0x66,0x13,0x4a,0xc1,0x85,0xcf,0x0c,
    0x24,0x76,0xa5,0x6e,0xd7,0xa1,0xec,0xc6,0x04,0xc2,0xa2,0x5c,0x81,0x92,0x6c,0xda,
    0xc6,0x86,0xba,0x4d,0x39,0xa0,0x0e,0x8c,0x8a,0xd0,0xfe,0x59,0x96,0x49,0xe6,0xea,
    0x69,0x30,0x52,0x1c,0xe0,0xb2,0x05,0x9b,0x10,0x03,0xa8,0x64,0x51,0x97,0x02,0x09,
    0x8e,0xad,0xf7,0x36,0x47,0xab,0xce,0x7f,0x56,0xca,0x00,0xe3,0xed,0xf1,0x38,0xd8,
    0x26,0x1c,0xdc,0x35,0x91,0x43,0x2c,0x74,0xb4,0x61,0x9d,0x5e,0xe9,0x4c,0xbf,0x77,
    0x16,0x1e,0x21,0x1d,0x2d,0xa9,0x95,0xb8,0xc3,0x8d,0xf8,0xdb,0x34,0xe1,0x84,0xd6,
    0x0b,0x23,0x4e,0xff,0x3c,0x54,0xa7,0x78,0xa4,0x89,0x33,0x6d,0xfb,0x79,0x27,0xc4,
    0xf9,0x40,0x41,0xdf,0xc5,0x82,0x93,0xdd,0xa6,0xef,0xcd,0x8d,0xa3,0xae,0x7a,0xb6,
    0x2f,0xfd,0xbd,0xe5,0x98,0x66,0xf3,0x4f,0x57,0x88,0x90,0x9c,0x0a,0x50,0xe7,0x15,
    0x7b,0x58,0xbc,0x07,0x68,0x3a,0x5f,0xee,0x32,0x9f,0xeb,0xcc,0x18,0x8b,0xe2,0x57,
    0xb7,0x49,0x37,0xde,0xf5,0x99,0x67,0x5b,0x3b,0xbb,0x3d,0xb5,0x2d,0x19,0x2e,0x0d,
    0x93,0xfc,0x7e,0x06,0x08,0xbe,0x3f,0xd9,0x2a,0x70,0x9a,0xc8,0x7d,0xd8,0x46,0x65,
    0x22,0xf4,0xb9,0xa2,0x6f,0x12,0x1b,0x14,0x45,0xc7,0x87,0x31,0x60,0x29,0xf7,0x73,
    0x2c,0x97,0x72,0xcd,0x89,0xa6,0x88,0x4c,0xe8,0x83,0xeb,0x59,0xca,0x50,0x3f,0x27,
    0x4e,0xae,0x43,0xd5,0x6e,0xd0,0x99,0x7b,0x7c,0x40,0x0c,0x52,0x86,0xc1,0x46,0x12,
    0x5a,0x28,0xa8,0xbb,0xcb,0xf0,0x11,0x95,0x26,0x0d,0x34,0x66,0x22,0x18,0x6f,0x51,
    0x9b,0x3b,0xda,0xec,0x5e,0x00,0x2a,0xf5,0x8f,0x61,0xba,0x96,0xb3,0xd1,0x30,0xdc,
    0x33,0x75,0xe9,0x6d,0xc8,0xa1,0x3a,0x3e,0x5f,0x9d,0xfd,0xa9,0x31,0x9f,0xaa,0x85,
    0x2f,0x92,0xaf,0x67,0x78,0xa5,0xab,0x03,0x21,0x4f,0xb9,0xad,0xfe,0xf3,0x42,0xfc,
    0x17,0xd7,0xee,0xa3,0xd8,0x80,0x14,0x2e,0xa0,0x47,0x55,0xc4,0xff,0xe5,0x13,0x3f,
    0x81,0xb6,0x7a,0x94,0xd0,0xb5,0x54,0xbf,0x91,0xa7,0x37,0xf1,0x6b,0xc9,0x1b,0xb1,
    0x3c,0xb6,0xd9,0x32,0x24,0x8d,0xf2,0x82,0xb4,0xf9,0xdb,0x7d,0x44,0xfb,0x1e,0xd4,
    0xea,0x5d,0x35,0x69,0x23,0x71,0x57,0x01,0x06,0xe4,0x55,0x9a,0xa4,0x58,0x56,0xc7,
    0x4a,0x8c,0x8a,0xd6,0x6a,0x49,0x70,0xc5,0x8e,0x0a,0x62,0xdc,0x29,0x4b,0x42,0x41,
    0xcb,0x2b,0xb7,0xce,0x08,0xa1,0x76,0x1d,0x1a,0xb8,0xe3,0xcc,0x7e,0x48,0x20,0xe6,
    0xf8,0x45,0x93,0xde,0xc3,0x63,0x0f,0xb0,0xac,0x5c,0xba,0xdf,0x07,0x77,0xe7,0x4e,
    0x1f,0x28,0x10,0x6c,0x59,0xd3,0xdd,0x2d,0x65,0x39,0xb2,0x74,0x84,0x3d,0xf4,0xbd,
    0xc7,0x79,0x60,0x0b,0x4d,0x33,0x36,0x25,0xbc,0xe0,0x09,0xcf,0x5b,0xe2,0x38,0x9e,
    0xc0,0xef,0xd2,0x16,0x05,0xbe,0x53,0xf7,0xc2,0xc6,0xa2,0x24,0x98,0x1c,0xad,0x04
]

# The diffusion matrix from the C code
diffusion = [
    0xf26cb481,0x16a5dc92,0x3c5ba924,0x79b65248,0x2fc64b18,0x615acd29,0xc3b59a42,0x976b2584,
    0x6cf281b4,0xa51692dc,0x5b3c24a9,0xb6794852,0xc62f184b,0x5a6129cd,0xb5c3429a,0x6b978425,
    0xb481f26c,0xdc9216a5,0xa9243c5b,0x524879b6,0x4b182fc6,0xcd29615a,0x9a42c3b5,0x2584976b,
    0x81b46cf2,0x92dca516,0x24a95b3c,0x4852b679,0x184bc62f,0x29cd5a61,0x429ab5c3,0x84256b97
]

def create_inverse_confusion():
    """Create inverse lookup table for the first half of confusion matrix"""
    inv_confusion1 = [0] * 256
    for i in range(256):
        inv_confusion1[confusion[i]] = i
    return inv_confusion1

def invert_diffusion_matrix_gf2(original):
    """Invert the diffusion matrix in GF(2)"""
    n = 32
    # Create identity matrix for inverse
    inverse = [1 << i for i in range(n)]
    
    # Copy original to work matrix
    work = original.copy()
    
    # Gaussian elimination in GF(2)
    for col in range(n):
        # Find pivot
        pivot = -1
        for row in range(col, n):
            if work[row] & (1 << col):
                pivot = row
                break
        
        if pivot == -1:
            continue  # Singular matrix
        
        # Swap rows if needed
        if pivot != col:
            work[col], work[pivot] = work[pivot], work[col]
            inverse[col], inverse[pivot] = inverse[pivot], inverse[col]
        
        # Eliminate
        for row in range(n):
            if row != col and (work[row] & (1 << col)):
                work[row] ^= work[col]
                inverse[row] ^= inverse[col]
    
    return inverse

def matrix_to_binary_representation(matrix, is_vector=False):
    """Convert matrix values to binary representation for visualization"""
    if is_vector:
        # For inv_confusion1, it's a permutation matrix
        result = np.zeros((256, 256), dtype=int)
        for i in range(256):
            result[i, matrix[i]] = 1
        return result
    else:
        # For diffusion matrix (32x32 in GF(2))
        result = np.zeros((32, 32), dtype=int)
        for i in range(32):
            for j in range(32):
                result[i, j] = (matrix[i] >> j) & 1
        return result

def visualize_matrix_product():
    """Visualize the structure of inv_confusion1 * inv_diffusion"""
    # Create inverse confusion
    inv_confusion1 = create_inverse_confusion()
    
    # Create inverse diffusion
    diffusion_inv = invert_diffusion_matrix_gf2(diffusion)
    
    # Convert to matrices
    perm_matrix = matrix_to_binary_representation(inv_confusion1, is_vector=True)
    diff_inv_matrix = matrix_to_binary_representation(diffusion_inv)
    
    # The actual operation in the code applies diffusion to 32-byte blocks
    # So we need to consider how these matrices interact
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 15))
    
    # 1. Inverse confusion permutation (first 32x32 subset)
    ax1 = axes[0, 0]
    im1 = ax1.imshow(perm_matrix[:32, :32], cmap='binary', interpolation='nearest')
    ax1.set_title('Inverse Confusion (first 32x32 subset)', fontsize=14)
    ax1.set_xlabel('Input index')
    ax1.set_ylabel('Output index')
    ax1.grid(True, alpha=0.3)
    
    # 2. Inverse diffusion matrix
    ax2 = axes[0, 1]
    im2 = ax2.imshow(diff_inv_matrix, cmap='binary', interpolation='nearest')
    ax2.set_title('Inverse Diffusion Matrix (32x32 in GF(2))', fontsize=14)
    ax2.set_xlabel('Bit position')
    ax2.set_ylabel('Output bit')
    ax2.grid(True, alpha=0.3)
    
    # 3. Pattern analysis of inverse confusion
    ax3 = axes[1, 0]
    # Show distribution of mappings
    mapping_hist = np.zeros(256)
    for i in range(256):
        mapping_hist[inv_confusion1[i]] = i
    ax3.plot(range(256), mapping_hist, 'b-', alpha=0.7)
    ax3.set_title('Inverse Confusion Mapping Pattern', fontsize=14)
    ax3.set_xlabel('Output value')
    ax3.set_ylabel('Input value')
    ax3.grid(True, alpha=0.3)
    
    # 4. Combined operation visualization
    ax4 = axes[1, 1]
    # Show how the operations compose
    ax4.text(0.5, 0.8, 'Combined Operation:', ha='center', va='center', 
             transform=ax4.transAxes, fontsize=16, weight='bold')
    ax4.text(0.5, 0.6, '1. Apply inverse diffusion (32x32 matrix mult in GF(2))', 
             ha='center', va='center', transform=ax4.transAxes, fontsize=12)
    ax4.text(0.5, 0.45, '2. Apply inverse confusion (byte substitution)', 
             ha='center', va='center', transform=ax4.transAxes, fontsize=12)
    ax4.text(0.5, 0.3, 'This reverses: confusion → diffusion', 
             ha='center', va='center', transform=ax4.transAxes, fontsize=12)
    ax4.text(0.5, 0.15, 'Used in Backward() function to decrypt', 
             ha='center', va='center', transform=ax4.transAxes, fontsize=12, style='italic')
    ax4.axis('off')
    
    plt.tight_layout()
    plt.savefig('/Users/adnanehamid/nerf/matrix_visualization.png', dpi=150, bbox_inches='tight')
    plt.show()
    
    # Print some statistics
    print("Matrix Structure Analysis:")
    print(f"Inverse Confusion: 256 → 256 permutation")
    print(f"Inverse Diffusion: 32x32 binary matrix (GF(2))")
    print(f"Diffusion matrix density: {np.sum(diff_inv_matrix) / (32*32):.2%}")
    
    # Check if inverse is correct
    # Multiply diffusion * diffusion_inv in GF(2)
    identity_check = np.zeros((32, 32), dtype=int)
    for i in range(32):
        for j in range(32):
            val = 0
            for k in range(32):
                if (diffusion[i] >> k) & 1:
                    val ^= diffusion_inv[k]
            identity_check[i, j] = (val >> j) & 1
    
    is_identity = np.array_equal(identity_check, np.eye(32, dtype=int))
    print(f"Diffusion inverse verification: {'PASSED' if is_identity else 'FAILED'}")

if __name__ == "__main__":
    visualize_matrix_product()